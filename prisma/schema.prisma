// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model MainCategory {
//   mcId String @id @default(uuid())
//   name String
//   subCategories SubCategory[]
// }

// model SubCategory {
//   scId String @id @default(uuid())
//   name String
//   mainCategoryId String 
//   mainCategory MainCategory @relation(fields : [mainCategoryId], references : [mcId])
//   products Product[]
//   categoryProducts ProductCategory[]
// }

model Category {
  cId               String            @id @default(uuid())
  name              String
  parentId          String?
  parent            Category?         @relation("CategoryTree", fields: [parentId], references: [cId], onDelete: Cascade)
  children          Category[]        @relation("CategoryTree")
  productCategories ProductCategory[]
}

model Product {
  pId               String            @id @default(uuid())
  name              String
  description       String?
  price             Decimal           @db.Decimal(10, 2)
  image             String?
  productCategories ProductCategory[]
  // orderItems        OrderItem[]
}

model ProductCategory {
  pcId       String @id @default(uuid())
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [pId], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [cId], onDelete: Cascade)
  // category SubCategory @relation(fields : [categoryId], references : [scId]) 

  @@unique([productId, categoryId])
  @@index([categoryId])
  @@index([productId])
}

// model User {
//   uId      String  @id @default(uuid())
//   name     String
//   email    String  @unique
//   address  String
//   phone    String
//   password String
//   isAdmin  Boolean @default(false)

//   orders Order[]
// }

// model OrderItem {
//   oiId String @id @default(uuid())

//   orderId String
//   order   Order  @relation(fields: [orderId], references: [oId])

//   productId String
//   product   Product @relation(fields: [productId], references: [pId], onDelete: Cascade)

//   quantity  Int     @default(1)
//   unitPrice Decimal @db.Decimal(10, 2)
//   linePrice Decimal @db.Decimal(10, 2)

//   //many to many relation defined
//   // itemOrderMaps ItemOrderMap[]

//   @@unique([orderId, productId])
//   @@index([orderId])
//   @@index([productId])
// }

model Order {
  oId             String   @id @default(uuid())
  userId          String
  // user            User     @relation(fields: [userId], references: [uId], onDelete: Cascade)
  orderSummary    Json     @db.JsonB
  shippingAddress String
  phone           String
  status          String   @default("Pending")
  paymentMethod   String
  paymentStatus   String   @default("Pending")
  total           Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())

  //!one to many relation defined
  // orderItems OrderItem[]
  // itemOrderMaps ItemOrderMap[]
}

// model ItemOrderMap {
//   iomId String @id @default(uuid())

//   orderItemId String
//   item  OrderItem @relation(fields : [orderItemId], references : [oiId])

//   orderId String
//   order Order @relation(fields : [orderId], references : [oId])
// }
